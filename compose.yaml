services:
  postgres:
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: uzyO776eNVLjVY8SkGEZ
      POSTGRES_DB: database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"]
      interval: 5s
      timeout: 2s
      retries: 2

  redis:
    image: cgr.dev/chainguard/redis:latest
    ports:
      - "6379:6379"
    command: ["--requirepass", "JKaGOI0JO9zU4BPv5xID"]
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 2

  backend:
    build: ./dev/backend
    env_file: ./dev/backend/.env
    tty: true
    environment:
      PYTHONUNBUFFERED: 1
    expose:
      - "8000"
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
    - "traefik.http.routers.backend.entrypoints=web"
    - "traefik.http.services.backend.loadbalancer.server.port=8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 2s
      retries: 2
    develop:
      watch:
        - action: sync
          path: ./backend/app
          target: /app
          ignore:
            - .venv/
            - __pycache__/
        - action: rebuild
          path: ./backend/uv.lock

  frontend:
    build: ./dev/frontend
    expose:
    - "5173"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1" # Lower priority than backend
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
    depends_on:
      backend:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 2s
      retries: 2
    develop:
      watch:
        - action: sync
          path: ./dev/frontend/app
          target: /app/app
        - action: rebuild
          path: ./dev/frontend/pnpm-lock.yaml

  traefik:
    image: traefik:latest
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"      # The main port for your applications
      - "8080:8080"  # Traefik dashboard (optional)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

volumes:
  postgres_data: