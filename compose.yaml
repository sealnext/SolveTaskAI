services:
  # backend:
  #   build: ./backend
  #   ports:
  #     - "8000:8000"
  #   env_file: "./backend/.env"
  #   environment:
  #     - PYTHONPATH=/app/src
  #   volumes:
  #     - ./backend:/app
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  postgres:
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dbname"]
      interval: 10s
      timeout: 3s
      retries: 2

  backend:
    build: ./backend
    env_file: ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 3s
      retries: 2
    develop:
      # Create a `watch` configuration to update the appl
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the backend app directory with the `/app` directory in the container
        - action: sync
          path: ./backend/app
          target: /app
          # Exclude the project virtual environment â€” it could be for a
          # different platform in the container
          ignore:
            - .venv/
            - __pycache__/
        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./backend/uv.lock

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "5173:5173"
  #   depends_on:
  #     backend:
  #       condition: service_healthy

volumes:
  postgres_data: